1 关于unit16_t的使用
因为8086cpu是16位的机器，也就是对应的寄存器是16位。在寄存器中数据有对应的取值范围，16位寄存器也就是分为有符号数和无符号数两种范围。
对于无符号数uint16_t 表示数据范围则是0 ~65535。
对于有符号数int16_t 表示数据范围为-32768~32767。

2 关于内存模型

MOV AX, 1
ADD BX, 0x20

测试1
DATA SEGMENT
Num1 DB 5
Num2 DW 10
Str1 DB 'Hello,', 0
Str2 DB 'World!', 0
DATA ENDS
MOV AX, Num1
MOV BX, Num2
ADD AX, BX
exit

测试2
DATA SEGMENT
Num1 DB 5
Num2 DW 10
Str1 DB 'Hello,', 0
Str2 DB 'World!', 0
DATA ENDS
MOV AX, 01H
MOV BX, 10
ADD AX, BX
exit

测试3
DATA SEGMENT
Num1 DB 5
Num2 DW 10
Str1 DB 'Hello,', 0
Str2 DB 'World!', 0
DATA ENDS
CODE SEGMENT
ASSUME CS:CODE, DS:DATA, SS:STACK
MOV AX, Num1
MOV BX, Num2
ADD AX, BX
CODE ENDS
exit

测试4
DATA SEGMENT
Num1 DB 5
Num2 DW 10
Str1 DB 'Hello,', 0
Str2 DB 'World!', 0
DATA ENDS
CODE SEGMENT
stra
CODE ENDS
exit

测试5 数据段 ASSUME 新符号名生成测试（已通过）
DATA SEGMENT
Num1 DB 5
Num2 DW 10
Str1 DB 'Hello,', 0
Str2 DB 'World!', 0
DATA ENDS
CODE SEGMENT
ASSUME CS:CODE, DS:DATA, SS:STACK
START
CODE ENDS
exit

测试6  初始化数据段寄存器测试（未通过 只要是DATA->AX有错）
DATA SEGMENT
Num1 DB 5
Num2 DW 10
Str1 DB 'Hello,', 0
Str2 DB 'World!', 0
DATA ENDS
CODE SEGMENT
ASSUME CS:CODE, DS:DATA, SS:STACK
MOV AX, DATA
MOV DS, AX
CODE ENDS
exit

测试7 数据传送指令测试 （过于复杂 待验证）
DATA SEGMENT
Num1 DB 5
Num2 DW 10
Str1 DB 'Hello,', 0
Str2 DB 'World!', 0
DATA ENDS
CODE SEGMENT
ASSUME CS:CODE, DS:DATA, SS:STACK
MOV AL, 15
MOV [Num1], AL
MOV BX, Num2
MOV CX, [BX]
LEA SI, Str1
PUSH CX
POP DX
CODE ENDS
exit

测试8 逻辑运算类指令 （已测试 OR和XOR不对）
DATA SEGMENT
Num1 DB 5
Num2 DW 10
Str1 DB 'Hello,', 0
Str2 DB 'World!', 0
DATA ENDS
CODE SEGMENT
ASSUME CS:CODE, DS:DATA, SS:STACK
MOV AL, 15
ADD AL, 3
SUB AL, 2
AND AL, 0Fh
OR AL, 01h
XOR AL, 02h
NOT AL
CODE ENDS
exit

测试9
 ; 字符串控制指令

    MOV SI, OFFSET Str1     ; 设置源地址

    MOV DI, OFFSET Str2     ; 设置目标地址
 未实现哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈忘了它了哈哈哈哈哈哈哈哈哈哈

 测试10 